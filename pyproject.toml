[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rival-search-agent"
version = "1.0.0"
description = "Modular AI agent with RAG capabilities for CLI, API, and library usage"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "RivalSearch Agent Team", email = "team@rivalsearch.com"}
]
keywords = ["ai", "agent", "mcp", "pydantic", "rag", "embeddings", "pgvector"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic-ai-slim[mcp,openai,anthropic,google,groq]>=0.1.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.5.0",
    "typing-extensions>=4.8.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.0",
    "sentence-transformers>=2.2.0",
    "click>=8.1.0",
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "striprtf>=0.0.26",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.4.0",
]

[project.scripts]
rival-search-agent = "src.cli:main"

[project.urls]
Homepage = "https://github.com/damionrashford/RivalSearchAgent"
Documentation = "https://github.com/damionrashford/RivalSearchAgent#readme"
Repository = "https://github.com/damionrashford/RivalSearchAgent.git"
Issues = "https://github.com/damionrashford/RivalSearchAgent/issues"

[tool.hatch.build.targets.wheel]
packages = ["rival_search_agent"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rival_search_agent"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydantic_ai.*",
    "fastapi.*",
    "uvicorn.*",
    "sentence_transformers.*",
    "click.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"scripts/**/*" = ["B011"]

[tool.pytest.ini_options]
testpaths = ["scripts"]
python_files = ["test_*.py", "example_usage.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=rival_search_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["rival_search_agent"]
omit = [
    "*/scripts/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
